{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","img","setting","disc","setdisc","date","Date","toLocaleDateString","year","month","day","className","main","cod","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","icon","description","catch","error","name","sys","country","Math","floor","temp_min","round","temp_max","src","alt","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAMMA,EACA,mCADAA,EAEE,2CA4FOC,MA1Ff,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAuBJ,mBAAS,IAAhC,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAgCIC,EAAO,IAAIC,KAGf,OAFAD,EAAOA,EAAKE,mBAAmB,QANjB,CACZC,KAAM,UACNC,MAAO,OACPC,IAAK,YAML,qBAAKC,UAAoC,qBAAjBZ,EAAQa,MAAsC,QAAdb,EAAQc,KAAiBd,EAAQa,KAAKE,KAAO,GAAM,WAAsB,MAAjI,SAEE,iCACE,qBAAKH,UAAU,aAAf,SACE,uBACEI,KAAK,OACLJ,UAAU,aACVK,YAAY,gBACZC,SAAU,SAAAC,GAAC,OAAIpB,EAASoB,EAAEC,OAAOC,QACjCA,MAAOvB,EACPwB,WA5CK,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAI9B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvD+B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACTA,EAAO7B,UACVG,EAAQ,oCAAD,OAC+B0B,EAAO7B,QAAQ,GAAGgC,KADjD,SAIP3B,EAAQwB,EAAO7B,QAAQ,GAAGiC,cAE1BhC,EAAW4B,MAKZK,OAAM,SAAAC,GACL,MAAMA,UA4BkB,qBAAjBnC,EAAQa,KACjB,8BACoB,QAAhBb,EAAQc,IACR,gCACF,sBAAKF,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BZ,EAAQoC,KAAnC,KAA2CpC,EAAQqC,IAAIC,WACvD,qBAAK1B,UAAU,OAAf,SAAuBN,OAEzB,sBAAKM,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACA,qCACI,uBADJ,UAEI2B,KAAKC,MAAMxC,EAAQa,KAAK4B,SAAW,QAFvC,aAIF,8BACKF,KAAKG,MAAM1C,EAAQa,KAAKE,MAD7B,WAGI,qCACE,uBADF,UAEEwB,KAAKC,MAAMxC,EAAQa,KAAK8B,SAAW,QAFrC,gBAKF,qBAAK/B,UAAU,UAAf,SAA0BR,IAC1B,qBAAKwC,IAAK1C,EAAK2C,IAAI,eAAejC,UAAU,iBAI5C,6BAAKZ,EAAQ8C,YAGZ,6BAAK9C,EAAQ8C,gBClFXC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.041b12b7.chunk.js","sourcesContent":["\nimport React , { useState } from 'react';\nimport './App.css';\n\n\n\nconst api ={\n  key:\"4ca5e2f3d1cc8cd593a61d77d3786d71\",\n  base :\"https://api.openweathermap.org/data/2.5/\"\n};\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [img, setting] = useState('');\n  const [disc, setdisc] = useState(\"\");\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          console.log(result);\n          if(result.weather){\n          setting(\n            `http://openweathermap.org/img/wn/${result.weather[0].icon}.png`\n          );\n          \n          setdisc(result.weather[0].description);\n          }\n          setWeather(result);\n          //setQuery();\n          \n          \n         })\n        .catch(error => {\n          throw(error);\n        })\n    };\n    \n  };\n  \n  var options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  };\n  let date = new Date();\n  date = date.toLocaleDateString(\"en-US\", options);\n\n  return (\n    <div className={(typeof weather.main !== \"undefined\" && weather.cod!==\"404\") ? ((weather.main.temp > 20) ? 'App warm' : 'App') : 'App'}>\n    \n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Enter City...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main !== \"undefined\") ? (\n        <div>\n           {weather.cod !== \"404\" ? (\n            <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{date}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n            <p>\n            Min <br />\n            {`${Math.floor(weather.main.temp_min - 273.15)}° C`}\n          </p>\n          <p>\n              {Math.round(weather.main.temp)}°c\n              </p>\n              <p>\n            Max <br />\n            {`${Math.floor(weather.main.temp_max - 273.15)}° C`}\n          </p>\n            </div>\n            <div className=\"weather\">{disc}</div>\n            <img src={img} alt=\"weather icon\" className=\"imgcss\" />\n          </div>\n          </div>\n          ):(\n            <h2>{weather.message}</h2>\n          )}\n        </div>\n        ) : (<h2>{weather.message}</h2>)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}